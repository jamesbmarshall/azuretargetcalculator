var O=(o,i)=>(i=Symbol[o])?i:Symbol.for("Symbol."+o),U=o=>{throw TypeError(o)};var I=(o,i,n)=>{if(i!=null){typeof i!="object"&&typeof i!="function"&&U("Object expected");var e,s;n&&(e=i[O("asyncDispose")]),e===void 0&&(e=i[O("dispose")],n&&(s=e)),typeof e!="function"&&U("Object not disposable"),s&&(e=function(){try{s.call(this)}catch(t){return Promise.reject(t)}}),o.push([n,e,i])}else n&&o.push([n]);return i},L=(o,i,n)=>{var e=typeof SuppressedError=="function"?SuppressedError:function(r,l,u,p){return p=Error(u),p.name="SuppressedError",p.error=r,p.suppressed=l,p},s=r=>i=n?new e(r,i,"An error was suppressed during disposal"):(n=!0,r),t=r=>{for(;r=o.pop();)try{var l=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(l).then(t,u=>(s(u),t()))}catch(u){s(u)}if(n)throw i};return t()};import Y from"@alloc/quick-lru";import{compileAst as J,env as Z,Features as P,Instrumentation as ee}from"@tailwindcss/node";import{clearRequireCache as te}from"@tailwindcss/node/require-cache";import{Scanner as se}from"@tailwindcss/oxide";import{Features as y,transform as ie}from"lightningcss";import re from"node:fs";import m,{relative as _}from"node:path";import b from"postcss";var Q=32;var j=40;function D(o,i=[]){for(let n=5;n<o.length;n++){let e=o.charCodeAt(n);if(e===Q||e===j){let s=o.slice(0,n).trim(),t=o.slice(n).trim();return g(s,t,i)}}return g(o.trim(),"",i)}var pe=process.env.FEATURES_ENV!=="stable";var q=64;function H(o,i=[]){return{kind:"rule",selector:o,nodes:i}}function g(o,i="",n=[]){return{kind:"at-rule",name:o,params:i,nodes:n}}function N(o,i=[]){return o.charCodeAt(0)===q?D(o,i):H(o,i)}function v(o,i,n=!1){return{kind:"declaration",property:o,value:i,important:n}}function R(o){return{kind:"comment",value:o}}function K(o){function i(e,s=0){let t="",r="  ".repeat(s);if(e.kind==="declaration")t+=`${r}${e.property}: ${e.value}${e.important?" !important":""};
`;else if(e.kind==="rule"){t+=`${r}${e.selector} {
`;for(let l of e.nodes)t+=i(l,s+1);t+=`${r}}
`}else if(e.kind==="at-rule"){if(e.nodes.length===0)return`${r}${e.name} ${e.params};
`;t+=`${r}${e.name}${e.params?` ${e.params} `:" "}{
`;for(let l of e.nodes)t+=i(l,s+1);t+=`${r}}
`}else if(e.kind==="comment")t+=`${r}/*${e.value}*/
`;else if(e.kind==="context"||e.kind==="at-root")return"";return t}let n="";for(let e of o){let s=i(e);s!==""&&(n+=s)}return n}import A from"postcss";var X=33;function W(o,i){let n=A.root();n.source=i;function e(s,t){if(s.kind==="declaration"){let r=A.decl({prop:s.property,value:s.value??"",important:s.important});r.source=i,t.append(r)}else if(s.kind==="rule"){let r=A.rule({selector:s.selector});r.source=i,r.raws.semicolon=!0,t.append(r);for(let l of s.nodes)e(l,r)}else if(s.kind==="at-rule"){let r=A.atRule({name:s.name.slice(1),params:s.params});r.source=i,r.raws.semicolon=!0,t.append(r);for(let l of s.nodes)e(l,r)}else if(s.kind==="comment"){let r=A.comment({text:s.value});r.raws.left="",r.raws.right="",r.source=i,t.append(r)}else s.kind==="at-root"||s.kind}for(let s of o)e(s,n);return n}function M(o){function i(e,s){if(e.type==="decl")s.push(v(e.prop,e.value,e.important));else if(e.type==="rule"){let t=N(e.selector);e.each(r=>i(r,t.nodes)),s.push(t)}else if(e.type==="atrule"){let t=g(`@${e.name}`,e.params);e.each(r=>i(r,t.nodes)),s.push(t)}else if(e.type==="comment"){if(e.text.charCodeAt(0)!==X)return;s.push(R(e.text))}}let n=[];return o.each(e=>i(e,n)),n}import{normalizePath as B}from"@tailwindcss/node";import S from"node:path";var k="'",T='"';function E(){let o=new WeakSet;function i(n){let e=n.root().source?.input.file;if(!e)return;let s=n.source?.input.file;if(!s||o.has(n))return;let t=n.params[0],r=t[0]===T&&t[t.length-1]===T?T:t[0]===k&&t[t.length-1]===k?k:null;if(!r)return;let l=n.params.slice(1,-1),u="";if(l.startsWith("!")&&(l=l.slice(1),u="!"),!l.startsWith("./")&&!l.startsWith("../"))return;let p=S.posix.join(B(S.dirname(s)),l),x=S.posix.dirname(B(e)),d=S.posix.relative(x,p);d.startsWith(".")||(d="./"+d),n.params=r+u+d+r,o.add(n)}return{postcssPlugin:"tailwindcss-postcss-fix-relative-paths",Once(n){n.walkAtRules(/source|plugin|config/,i)}}}var a=Z.DEBUG,w=new Y({maxSize:50});function ne(o,i){let n=`${o}:${i.base??""}:${JSON.stringify(i.optimize)}`;if(w.has(n))return w.get(n);let e={mtimes:new Map,compiler:null,scanner:null,tailwindCssAst:[],cachedPostCssAst:b.root(),optimizedPostCssAst:b.root(),fullRebuildPaths:[]};return w.set(n,e),e}function le(o={}){let i=o.base??process.cwd(),n=o.optimize??process.env.NODE_ENV==="production";return{postcssPlugin:"@tailwindcss/postcss",plugins:[E(),{postcssPlugin:"tailwindcss",async Once(e,{result:s}){var $=[];try{let t=I($,new ee);let r=s.opts.from??"";a&&t.start(`[@tailwindcss/postcss] ${_(i,r)}`);{a&&t.start("Quick bail check");let c=!0;if(e.walkAtRules(f=>{if(f.name==="import"||f.name==="reference"||f.name==="theme"||f.name==="variant"||f.name==="config"||f.name==="plugin"||f.name==="apply")return c=!1,!1}),c)return;a&&t.end("Quick bail check")}let l=ne(r,o);let u=m.dirname(m.resolve(r));async function p(){a&&t.start("Setup compiler"),l.fullRebuildPaths.length>0&&!x&&te(l.fullRebuildPaths),l.fullRebuildPaths=[],a&&t.start("PostCSS AST -> Tailwind CSS AST");let c=M(e);a&&t.end("PostCSS AST -> Tailwind CSS AST"),a&&t.start("Create compiler");let f=await J(c,{base:u,onDependency:h=>{l.fullRebuildPaths.push(h)}});return a&&t.end("Create compiler"),a&&t.end("Setup compiler"),f}let x=l.compiler===null;l.compiler??=await p();if(l.compiler.features===P.None)return;let d="incremental";a&&t.start("Register full rebuild paths");{for(let f of l.fullRebuildPaths)s.messages.push({type:"dependency",plugin:"@tailwindcss/postcss",file:m.resolve(f),parent:s.opts.from});let c=s.messages.flatMap(f=>f.type!=="dependency"?[]:f.file);c.push(r);for(let f of c){let h=re.statSync(f,{throwIfNoEntry:!1})?.mtimeMs??null;if(h===null){f===r&&(d="full");continue}l.mtimes.get(f)!==h&&(d="full",l.mtimes.set(f,h))}}a&&t.end("Register full rebuild paths");d==="full"&&!x&&(l.compiler=await p());if(l.scanner===null||d==="full"){a&&t.start("Setup scanner");let c=(l.compiler.root==="none"?[]:l.compiler.root===null?[{base:i,pattern:"**/*"}]:[l.compiler.root]).concat(l.compiler.globs);l.scanner=new se({sources:c}),a&&t.end("Setup scanner")}a&&t.start("Scan for candidates");let F=l.compiler.features&P.Utilities?l.scanner.scan():[];a&&t.end("Scan for candidates");if(l.compiler.features&P.Utilities){a&&t.start("Register dependency messages");for(let c of l.scanner.files)s.messages.push({type:"dependency",plugin:"@tailwindcss/postcss",file:m.resolve(c),parent:s.opts.from});for(let{base:c,pattern:f}of l.scanner.globs)f==="*"&&i===c||(f===""?s.messages.push({type:"dependency",plugin:"@tailwindcss/postcss",file:m.resolve(c),parent:s.opts.from}):s.messages.push({type:"dir-dependency",plugin:"@tailwindcss/postcss",dir:m.resolve(c),glob:f,parent:s.opts.from}));a&&t.end("Register dependency messages")}a&&t.start("Build utilities");let C=l.compiler.build(F);a&&t.end("Build utilities");if(l.tailwindCssAst!==C)if(n){a&&t.start("Optimization"),a&&t.start("AST -> CSS");let c=K(C);a&&t.end("AST -> CSS"),a&&t.start("Lightning CSS");let f=oe(c,{minify:typeof n=="object"?n.minify:!0});a&&t.end("Lightning CSS"),a&&t.start("CSS -> PostCSS AST"),l.optimizedPostCssAst=b.parse(f,s.opts),a&&t.end("CSS -> PostCSS AST"),a&&t.end("Optimization")}else a&&t.start("Transform Tailwind CSS AST into PostCSS AST"),l.cachedPostCssAst=W(C,e.source),a&&t.end("Transform Tailwind CSS AST into PostCSS AST");l.tailwindCssAst=C;a&&t.start("Update PostCSS AST");e.removeAll();e.append(n?l.optimizedPostCssAst.clone().nodes:l.cachedPostCssAst.clone().nodes);e.raws.indent="  ";a&&t.end("Update PostCSS AST");a&&t.end(`[@tailwindcss/postcss] ${_(i,r)}`)}catch(z){var V=z,G=!0}finally{L($,V,G)}}}]}}function oe(o,{file:i="input.css",minify:n=!1}={}){function e(s){return ie({filename:i,code:s,minify:n,sourceMap:!1,drafts:{customMedia:!0},nonStandard:{deepSelectorCombinator:!0},include:y.Nesting,exclude:y.LogicalProperties|y.DirSelector|y.LightDark,targets:{safari:16<<16|1024,ios_saf:16<<16|1024,firefox:8388608,chrome:7274496},errorRecovery:!0}).code}return e(e(Buffer.from(o))).toString()}var Qe=Object.assign(le,{postcss:!0});export{Qe as default};
